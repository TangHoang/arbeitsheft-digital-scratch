{"version":3,"file":"de8f8bc6a32b81bc05bd.worker.js","mappings":";;;;;AAAA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA,WAAW,QAAQ;AACnB;AACA,oBAAoB,UAAU;AAC9B;AACA;AACA;;AAEA;;AAEA;AACA;AACA,uCAAuC,mBAAmB;AAC1D,uCAAuC,kBAAkB;AACzD;AACA;;AAEA;AACA,iBAAiB,UAAU,aAAa;AACxC;AACA,EAAE;AACF,iBAAiB,UAAU,cAAc;AACzC,uCAAuC,UAAU;AACjD,sBAAsB,qDAAqD;AAC3E,KAAK;AACL","sources":["webpack://whisker-web/../node_modules/scratch-storage/src/FetchWorkerTool.worker.js"],"sourcesContent":["/* eslint-env worker */\n\nlet jobsActive = 0;\nconst complete = [];\n\nlet intervalId = null;\n\n/**\n * Register a step function.\n *\n * Step checks if there are completed jobs and if there are sends them to the\n * parent. Then it checks the jobs count. If there are no further jobs, clear\n * the step.\n */\nconst registerStep = function () {\n    intervalId = setInterval(() => {\n        if (complete.length) {\n            // Send our chunk of completed requests and instruct postMessage to\n            // transfer the buffers instead of copying them.\n            postMessage(\n                complete.slice(),\n                // Instruct postMessage that these buffers in the sent message\n                // should use their Transferable trait. After the postMessage\n                // call the \"buffers\" will still be in complete if you looked,\n                // but they will all be length 0 as the data they reference has\n                // been sent to the window. This lets us send a lot of data\n                // without the normal postMessage behaviour of making a copy of\n                // all of the data for the window.\n                complete.map(response => response.buffer).filter(Boolean)\n            );\n            complete.length = 0;\n        }\n        if (jobsActive === 0) {\n            clearInterval(intervalId);\n            intervalId = null;\n        }\n    }, 1);\n};\n\n/**\n * Receive a job from the parent and fetch the requested data.\n * @param {object} options.job A job id, url, and options descriptor to perform.\n */\nconst onMessage = ({data: job}) => {\n    if (jobsActive === 0 && !intervalId) {\n        registerStep();\n    }\n\n    jobsActive++;\n\n    fetch(job.url, job.options)\n        .then(response => response.arrayBuffer())\n        .then(buffer => complete.push({id: job.id, buffer}))\n        .catch(error => complete.push({id: job.id, error}))\n        .then(() => jobsActive--);\n};\n\nif (self.fetch) {\n    postMessage({support: {fetch: true}});\n    self.addEventListener('message', onMessage);\n} else {\n    postMessage({support: {fetch: false}});\n    self.addEventListener('message', ({data: job}) => {\n        postMessage([{id: job.id, error: new Error('fetch is unavailable')}]);\n    });\n}\n"],"names":[],"sourceRoot":""}